<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [..\Output\STM32L15x_Medium_b1_V10000.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image ..\Output\STM32L15x_Medium_b1_V10000.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060183: Last Updated: Thu Jun 02 19:10:43 2016
<BR><P>
<H3>Maximum Stack Usage =        704 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
FaultMsg &rArr; Msg_Upload &rArr; Msg_UploadUnit &rArr; Msg_Package &rArr; Msg_Feedback &rArr; EncryptCmd_put &rArr; EncryptData &rArr; ChkCrcValue
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[72]">__user_initial_stackheap</a>
 <LI><a href="#[83]">CPU_SR_Save</a>
 <LI><a href="#[85]">CPU_SR_Restore</a>
 <LI><a href="#[116]">WFI_SET</a>
 <LI><a href="#[aa]">Set_MSP</a>
 <LI><a href="#[46]">SystemReset</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[4]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">NMI_Handler</a><BR>
 <LI><a href="#[5]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">HardFault_Handler</a><BR>
 <LI><a href="#[6]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">MemManage_Handler</a><BR>
 <LI><a href="#[7]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">BusFault_Handler</a><BR>
 <LI><a href="#[8]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">UsageFault_Handler</a><BR>
 <LI><a href="#[9]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9]">SVC_Handler</a><BR>
 <LI><a href="#[a]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[a]">DebugMon_Handler</a><BR>
 <LI><a href="#[b]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b]">PendSV_Handler</a><BR>
 <LI><a href="#[1f]">ADC1_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1f]">ADC1_IRQHandler</a><BR>
 <LI><a href="#[8f]">WriteDataToEEPROM</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[91]">Fault_Upload</a><BR>
 <LI><a href="#[8e]">ReadDataFromEEPROM</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[91]">Fault_Upload</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1f]">ADC1_IRQHandler</a> from startup_stm32l1xx_md.o(.text) referenced from startup_stm32l1xx_md.o(RESET)
 <LI><a href="#[7]">BusFault_Handler</a> from startup_stm32l1xx_md.o(.text) referenced from startup_stm32l1xx_md.o(RESET)
 <LI><a href="#[23]">COMP_IRQHandler</a> from startup_stm32l1xx_md.o(.text) referenced from startup_stm32l1xx_md.o(RESET)
 <LI><a href="#[22]">DAC_IRQHandler</a> from startup_stm32l1xx_md.o(.text) referenced from startup_stm32l1xx_md.o(RESET)
 <LI><a href="#[18]">DMA1_Channel1_IRQHandler</a> from startup_stm32l1xx_md.o(.text) referenced from startup_stm32l1xx_md.o(RESET)
 <LI><a href="#[19]">DMA1_Channel2_IRQHandler</a> from startup_stm32l1xx_md.o(.text) referenced from startup_stm32l1xx_md.o(RESET)
 <LI><a href="#[1a]">DMA1_Channel3_IRQHandler</a> from startup_stm32l1xx_md.o(.text) referenced from startup_stm32l1xx_md.o(RESET)
 <LI><a href="#[1b]">DMA1_Channel4_IRQHandler</a> from startup_stm32l1xx_md.o(.text) referenced from startup_stm32l1xx_md.o(RESET)
 <LI><a href="#[1c]">DMA1_Channel5_IRQHandler</a> from startup_stm32l1xx_md.o(.text) referenced from startup_stm32l1xx_md.o(RESET)
 <LI><a href="#[1d]">DMA1_Channel6_IRQHandler</a> from startup_stm32l1xx_md.o(.text) referenced from startup_stm32l1xx_md.o(RESET)
 <LI><a href="#[1e]">DMA1_Channel7_IRQHandler</a> from startup_stm32l1xx_md.o(.text) referenced from startup_stm32l1xx_md.o(RESET)
 <LI><a href="#[42]">DataSend_Thread</a> from cmdprocess.o(i.DataSend_Thread) referenced from cmdprocess.o(i.FIFOInit)
 <LI><a href="#[a]">DebugMon_Handler</a> from startup_stm32l1xx_md.o(.text) referenced from startup_stm32l1xx_md.o(RESET)
 <LI><a href="#[13]">EXTI0_IRQHandler</a> from startup_stm32l1xx_md.o(.text) referenced from startup_stm32l1xx_md.o(RESET)
 <LI><a href="#[35]">EXTI15_10_IRQHandler</a> from si4432.o(i.EXTI15_10_IRQHandler) referenced from startup_stm32l1xx_md.o(RESET)
 <LI><a href="#[14]">EXTI1_IRQHandler</a> from startup_stm32l1xx_md.o(.text) referenced from startup_stm32l1xx_md.o(RESET)
 <LI><a href="#[15]">EXTI2_IRQHandler</a> from startup_stm32l1xx_md.o(.text) referenced from startup_stm32l1xx_md.o(RESET)
 <LI><a href="#[16]">EXTI3_IRQHandler</a> from startup_stm32l1xx_md.o(.text) referenced from startup_stm32l1xx_md.o(RESET)
 <LI><a href="#[17]">EXTI4_IRQHandler</a> from startup_stm32l1xx_md.o(.text) referenced from startup_stm32l1xx_md.o(RESET)
 <LI><a href="#[24]">EXTI9_5_IRQHandler</a> from startup_stm32l1xx_md.o(.text) referenced from startup_stm32l1xx_md.o(RESET)
 <LI><a href="#[11]">FLASH_IRQHandler</a> from startup_stm32l1xx_md.o(.text) referenced from startup_stm32l1xx_md.o(RESET)
 <LI><a href="#[49]">FaultMsg</a> from upload.o(i.FaultMsg) referenced from upload.o(i.Upload_Fault)
 <LI><a href="#[51]">Get_433Channel_Attr</a> from deviceupgradeattr.o(i.Get_433Channel_Attr) referenced from sysexeattr.o(.constdata)
 <LI><a href="#[4a]">Get_DeviceType_Attr</a> from sysexeattr.o(i.Get_DeviceType_Attr) referenced from sysexeattr.o(.constdata)
 <LI><a href="#[4e]">Get_IAPReady_Attr</a> from deviceupgradeattr.o(i.Get_IAPReady_Attr) referenced from sysexeattr.o(.constdata)
 <LI><a href="#[4b]">Get_Version_Attr</a> from sysexeattr.o(i.Get_Version_Attr) referenced from sysexeattr.o(.constdata)
 <LI><a href="#[5]">HardFault_Handler</a> from startup_stm32l1xx_md.o(.text) referenced from startup_stm32l1xx_md.o(RESET)
 <LI><a href="#[2d]">I2C1_ER_IRQHandler</a> from startup_stm32l1xx_md.o(.text) referenced from startup_stm32l1xx_md.o(RESET)
 <LI><a href="#[2c]">I2C1_EV_IRQHandler</a> from startup_stm32l1xx_md.o(.text) referenced from startup_stm32l1xx_md.o(RESET)
 <LI><a href="#[2f]">I2C2_ER_IRQHandler</a> from startup_stm32l1xx_md.o(.text) referenced from startup_stm32l1xx_md.o(RESET)
 <LI><a href="#[2e]">I2C2_EV_IRQHandler</a> from startup_stm32l1xx_md.o(.text) referenced from startup_stm32l1xx_md.o(RESET)
 <LI><a href="#[44]">IWDG_Feed</a> from iwdg.o(i.IWDG_Feed) referenced from iwdg.o(i.IWDG_Config)
 <LI><a href="#[44]">IWDG_Feed</a> from iwdg.o(i.IWDG_Feed) referenced from iwdg.o(i.IWDG_FeedOFF)
 <LI><a href="#[43]">Instruct_Run</a> from instruct.o(i.Instruct_Run) referenced from faultmanage.o(i.Fault_Upload)
 <LI><a href="#[25]">LCD_IRQHandler</a> from startup_stm32l1xx_md.o(.text) referenced from startup_stm32l1xx_md.o(RESET)
 <LI><a href="#[6]">MemManage_Handler</a> from startup_stm32l1xx_md.o(.text) referenced from startup_stm32l1xx_md.o(RESET)
 <LI><a href="#[3e]">Msg_Process</a> from cmdprocess.o(i.Msg_Process) referenced from cmdprocess.o(i.FIFOInit)
 <LI><a href="#[4]">NMI_Handler</a> from startup_stm32l1xx_md.o(.text) referenced from startup_stm32l1xx_md.o(RESET)
 <LI><a href="#[40]">PHY_433Send</a> from phymsgproc.o(i.PHY_433Send) referenced from cmdprocess.o(i.FIFOInit)
 <LI><a href="#[41]">PHY_USARTSend</a> from phymsgproc.o(i.PHY_USARTSend) referenced from cmdprocess.o(i.FIFOInit)
 <LI><a href="#[e]">PVD_IRQHandler</a> from startup_stm32l1xx_md.o(.text) referenced from startup_stm32l1xx_md.o(RESET)
 <LI><a href="#[b]">PendSV_Handler</a> from startup_stm32l1xx_md.o(.text) referenced from startup_stm32l1xx_md.o(RESET)
 <LI><a href="#[12]">RCC_IRQHandler</a> from startup_stm32l1xx_md.o(.text) referenced from startup_stm32l1xx_md.o(RESET)
 <LI><a href="#[36]">RTC_Alarm_IRQHandler</a> from startup_stm32l1xx_md.o(.text) referenced from startup_stm32l1xx_md.o(RESET)
 <LI><a href="#[10]">RTC_WKUP_IRQHandler</a> from startup_stm32l1xx_md.o(.text) referenced from startup_stm32l1xx_md.o(RESET)
 <LI><a href="#[3]">Reset_Handler</a> from startup_stm32l1xx_md.o(.text) referenced from startup_stm32l1xx_md.o(RESET)
 <LI><a href="#[47]">SI4432_SendEn</a> from si4432.o(i.SI4432_SendEn) referenced from si4432.o(i.Si4432_Send)
 <LI><a href="#[30]">SPI1_IRQHandler</a> from startup_stm32l1xx_md.o(.text) referenced from startup_stm32l1xx_md.o(RESET)
 <LI><a href="#[31]">SPI2_IRQHandler</a> from startup_stm32l1xx_md.o(.text) referenced from startup_stm32l1xx_md.o(RESET)
 <LI><a href="#[9]">SVC_Handler</a> from startup_stm32l1xx_md.o(.text) referenced from startup_stm32l1xx_md.o(RESET)
 <LI><a href="#[50]">Set_433Channel_Attr</a> from deviceupgradeattr.o(i.Set_433Channel_Attr) referenced from sysexeattr.o(.constdata)
 <LI><a href="#[4f]">Set_IAPPackSave_Attr</a> from deviceupgradeattr.o(i.Set_IAPPackSave_Attr) referenced from sysexeattr.o(.constdata)
 <LI><a href="#[4d]">Set_IAPReady_Attr</a> from deviceupgradeattr.o(i.Set_IAPReady_Attr) referenced from sysexeattr.o(.constdata)
 <LI><a href="#[4c]">Set_UserDataFormat_Attr</a> from sysexeattr.o(i.Set_UserDataFormat_Attr) referenced from sysexeattr.o(.constdata)
 <LI><a href="#[45]">Si4432_Init</a> from si4432.o(i.Si4432_Init) referenced from deviceupgradeattr.o(i.Set_433Channel_Attr)
 <LI><a href="#[45]">Si4432_Init</a> from si4432.o(i.Si4432_Init) referenced from si4432.o(i.Si4432_Fault)
 <LI><a href="#[3c]">Si4432_Threshold</a> from si4432.o(i.Si4432_Threshold) referenced from si4432.o(i.Check_433M_Busy)
 <LI><a href="#[3c]">Si4432_Threshold</a> from si4432.o(i.Si4432_Threshold) referenced from si4432.o(i.Si4432_Init)
 <LI><a href="#[52]">SysAttr_Init</a> from sysexeattr.o(i.SysAttr_Init) referenced from unitcfg.o(.constdata)
 <LI><a href="#[c]">SysTick_Handler</a> from systick.o(i.SysTick_Handler) referenced from startup_stm32l1xx_md.o(RESET)
 <LI><a href="#[53]">Sys_UnitAttrNum</a> from sysexeattr.o(i.Sys_UnitAttrNum) referenced from unitcfg.o(.constdata)
 <LI><a href="#[3a]">SystemInit</a> from system_stm32l1xx.o(i.SystemInit) referenced from startup_stm32l1xx_md.o(.text)
 <LI><a href="#[46]">SystemReset</a> from cpu.o(.text) referenced from deviceupgradeattr.o(i.Set_IAPDataCRC_Attr)
 <LI><a href="#[f]">TAMPER_STAMP_IRQHandler</a> from startup_stm32l1xx_md.o(.text) referenced from startup_stm32l1xx_md.o(RESET)
 <LI><a href="#[27]">TIM10_IRQHandler</a> from startup_stm32l1xx_md.o(.text) referenced from startup_stm32l1xx_md.o(RESET)
 <LI><a href="#[28]">TIM11_IRQHandler</a> from startup_stm32l1xx_md.o(.text) referenced from startup_stm32l1xx_md.o(RESET)
 <LI><a href="#[29]">TIM2_IRQHandler</a> from startup_stm32l1xx_md.o(.text) referenced from startup_stm32l1xx_md.o(RESET)
 <LI><a href="#[2a]">TIM3_IRQHandler</a> from startup_stm32l1xx_md.o(.text) referenced from startup_stm32l1xx_md.o(RESET)
 <LI><a href="#[2b]">TIM4_IRQHandler</a> from startup_stm32l1xx_md.o(.text) referenced from startup_stm32l1xx_md.o(RESET)
 <LI><a href="#[38]">TIM6_IRQHandler</a> from startup_stm32l1xx_md.o(.text) referenced from startup_stm32l1xx_md.o(RESET)
 <LI><a href="#[39]">TIM7_IRQHandler</a> from startup_stm32l1xx_md.o(.text) referenced from startup_stm32l1xx_md.o(RESET)
 <LI><a href="#[26]">TIM9_IRQHandler</a> from startup_stm32l1xx_md.o(.text) referenced from startup_stm32l1xx_md.o(RESET)
 <LI><a href="#[32]">USART1_IRQHandler</a> from usart.o(i.USART1_IRQHandler) referenced from startup_stm32l1xx_md.o(RESET)
 <LI><a href="#[33]">USART2_IRQHandler</a> from startup_stm32l1xx_md.o(.text) referenced from startup_stm32l1xx_md.o(RESET)
 <LI><a href="#[34]">USART3_IRQHandler</a> from startup_stm32l1xx_md.o(.text) referenced from startup_stm32l1xx_md.o(RESET)
 <LI><a href="#[37]">USB_FS_WKUP_IRQHandler</a> from startup_stm32l1xx_md.o(.text) referenced from startup_stm32l1xx_md.o(RESET)
 <LI><a href="#[20]">USB_HP_IRQHandler</a> from startup_stm32l1xx_md.o(.text) referenced from startup_stm32l1xx_md.o(RESET)
 <LI><a href="#[21]">USB_LP_IRQHandler</a> from startup_stm32l1xx_md.o(.text) referenced from startup_stm32l1xx_md.o(RESET)
 <LI><a href="#[48]">Upload_RESTART</a> from sysexeattr.o(i.Upload_RESTART) referenced from sysexeattr.o(i.SysAttr_Init)
 <LI><a href="#[8]">UsageFault_Handler</a> from startup_stm32l1xx_md.o(.text) referenced from startup_stm32l1xx_md.o(RESET)
 <LI><a href="#[d7]">UserData_Init</a> from userdata.o(i.UserData_Init) referenced 2 times from userdata.o(i.UserData_Init)
 <LI><a href="#[d]">WWDG_IRQHandler</a> from startup_stm32l1xx_md.o(.text) referenced from startup_stm32l1xx_md.o(RESET)
 <LI><a href="#[54]">__main</a> from __main.o(!!!main) referenced from startup_stm32l1xx_md.o(.text)
 <LI><a href="#[3f]">decryptfifo_get</a> from fifodataproc.o(i.decryptfifo_get) referenced from cmdprocess.o(i.FIFOInit)
 <LI><a href="#[3d]">decryptfifo_getEx</a> from fifodataproc.o(i.decryptfifo_getEx) referenced from cmdprocess.o(i.FIFOInit)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[54]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[55]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[57]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[f1]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[f2]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[f3]"></a>__decompress</STRONG> (Thumb, 90 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[f4]"></a>__decompress1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[f5]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[5b]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[f6]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[f7]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[f8]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[f9]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[fa]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[fb]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[fc]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[fd]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[fe]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[ff]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[100]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[101]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[102]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[103]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[104]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[105]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[106]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[107]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[108]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[109]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[10a]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[60]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[10b]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[10c]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[10d]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[10e]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[10f]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[110]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[111]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[56]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[112]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[58]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[5a]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[113]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[5c]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; Unit_Init &rArr; UnitPublicEEPROMData_Get &rArr; ReadDataFromEEPROM &rArr;  Fault_Upload (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[114]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[73]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[5f]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[115]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[61]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[3]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32l1xx_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32l1xx_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32l1xx_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32l1xx_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32l1xx_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32l1xx_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32l1xx_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32l1xx_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32l1xx_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>ADC1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>COMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>LCD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>TAMPER_STAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>TIM10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TIM11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>TIM6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>TIM9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>USB_FS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>USB_HP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>USB_LP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(RESET)
</UL>
<P><STRONG><a name="[72]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32l1xx_md.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[83]"></a>CPU_SR_Save</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, cpu.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Thread_RunCheck
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Thread_Process
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EncryptCmd_put
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[85]"></a>CPU_SR_Restore</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, cpu.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Thread_RunCheck
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Thread_Process
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EncryptCmd_put
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[116]"></a>WFI_SET</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, cpu.o(.text), UNUSED)

<P><STRONG><a name="[aa]"></a>Set_MSP</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, cpu.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JumpToCode
</UL>

<P><STRONG><a name="[46]"></a>SystemReset</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, cpu.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> deviceupgradeattr.o(i.Set_IAPDataCRC_Attr)
</UL>
<P><STRONG><a name="[6c]"></a>EncryptData</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, dataencrypt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = EncryptData &rArr; ChkCrcValue
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChkCrcValue
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memmove
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataFieldEncodeOrDecode
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EncryptCmd_put
</UL>

<P><STRONG><a name="[6f]"></a>DecryptData</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, dataencrypt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = DecryptData &rArr; GetEncodeFromKey &rArr; KeyEncode &rArr; KeyEncodeShift
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChkCrcValue
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memmove
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetEncodeFromKey
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckDataFieldCRC
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataFieldEncodeOrDecode
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decryptfifo_getEx
</UL>

<P><STRONG><a name="[70]"></a>EncryptInit</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, dataencrypt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = EncryptInit &rArr; KeyEncode &rArr; KeyEncodeShift
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyEncode
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysAttr_Init
</UL>

<P><STRONG><a name="[117]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[118]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[119]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[59]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[5e]"></a>exit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[11a]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[71]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[11b]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[62]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[11c]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[11d]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[11e]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[74]"></a>AppJump_Init</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, updata.o(i.AppJump_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = AppJump_Init &rArr; JumpToCode
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JumpToCode
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDevPivotalSet
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[77]"></a>Channel_Get</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, updata.o(i.Channel_Get))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Channel_Get
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Program_Read
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_DefaultValue
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDevPivotalSet
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Updata_Flag
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Si4432_Init
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_433Channel_Attr
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_433Channel_Attr
</UL>

<P><STRONG><a name="[68]"></a>ChkCrcValue</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, crc.o(i.ChkCrcValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ChkCrcValue
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EncryptData
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecryptData
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Updata_Calibrate
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EncryptCmd_put
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckDataFieldCRC
</UL>

<P><STRONG><a name="[7f]"></a>DevPivotalSetInit</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, devparttab.o(i.DevPivotalSetInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DevPivotalSetInit
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_ChipSize
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[35]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, si4432.o(i.EXTI15_10_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = EXTI15_10_IRQHandler &rArr; RecDataToFifo &rArr; Fault_Upload &rArr; FaultData_Save &rArr; WriteDataToEEPROM &rArr;  Fault_Upload (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecDataToFifo
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(RESET)
</UL>
<P><STRONG><a name="[d5]"></a>EXTI_NVIC_Config</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, sys.o(i.EXTI_NVIC_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = EXTI_NVIC_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Si4432_Init
</UL>

<P><STRONG><a name="[82]"></a>EncryptCmd_put</STRONG> (Thumb, 118 bytes, Stack size 280 bytes, fifodataproc.o(i.EncryptCmd_put))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = EncryptCmd_put &rArr; EncryptData &rArr; ChkCrcValue
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EncryptData
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_puts
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChkCrcValue
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg_Feedback
</UL>

<P><STRONG><a name="[86]"></a>FIFOInit</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, cmdprocess.o(i.FIFOInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = FIFOInit &rArr; Thread_Login &rArr; Thread_Wake &rArr; Thread_Check
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Thread_Login
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PHY_RcvFIFO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[88]"></a>FLASH_ErasePage</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, flash.o(i.FLASH_ErasePage))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FLASH_ErasePage
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Status
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_EOP
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Program_Erase
</UL>

<P><STRONG><a name="[8b]"></a>FaultData_Init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, faultmanage.o(i.FaultData_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = FaultData_Init &rArr; WriteDataToEEPROMEx &rArr; Fault_Upload &rArr; FaultData_Save &rArr; WriteDataToEEPROM &rArr;  Fault_Upload (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteDataToEEPROMEx
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserData_Init
</UL>

<P><STRONG><a name="[8d]"></a>FaultData_Save</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, faultmanage.o(i.FaultData_Save))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = FaultData_Save &rArr; WriteDataToEEPROM &rArr;  Fault_Upload (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteDataToEEPROM
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDataFromEEPROM
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fault_Upload
</UL>

<P><STRONG><a name="[91]"></a>Fault_Upload</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, faultmanage.o(i.Fault_Upload))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = Fault_Upload &rArr; FaultData_Save &rArr; WriteDataToEEPROM &rArr;  Fault_Upload (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Thread_Logout
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Upload_Fault
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_FeedOFF
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Thread_Login
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FaultData_Save
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysAttr_Init
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg_Feedback
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Si4432_Fault
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecDataToFifo
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteDataToEEPROMEx
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteDataToEEPROM
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDataFromEEPROM
</UL>

<P><STRONG><a name="[80]"></a>Flash_ChipSize</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, program.o(i.Flash_ChipSize))
<BR><BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevPivotalSetInit
</UL>

<P><STRONG><a name="[78]"></a>Flash_DefaultValue</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, program.o(i.Flash_DefaultValue))
<BR><BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Updata_Flag
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Updata_Channel
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Channel_Get
</UL>

<P><STRONG><a name="[bb]"></a>Flash_Unlock</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, flash.o(i.Flash_Unlock))
<BR><BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Program_Write
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Program_Erase
</UL>

<P><STRONG><a name="[95]"></a>Flash_Write</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, flash.o(i.Flash_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Flash_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Status
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Program_Write
</UL>

<P><STRONG><a name="[bc]"></a>Flash_lock</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, flash.o(i.Flash_lock))
<BR><BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Program_Write
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Program_Erase
</UL>

<P><STRONG><a name="[9f]"></a>GPIO_Config</STRONG> (Thumb, 154 bytes, Stack size 32 bytes, gpio.o(i.GPIO_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GPIO_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Si4432_PortInit
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Init
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitAck
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RecvB_Ack
</UL>

<P><STRONG><a name="[7c]"></a>GPIO_ReadInputDataBit</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, gpio.o(i.GPIO_ReadInputDataBit))
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecDataToFifo
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_433M_Busy
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitAck
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RecvB_Ack
</UL>

<P><STRONG><a name="[9b]"></a>GPIO_ResetBits</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gpio.o(i.GPIO_ResetBits))
<BR><BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Si4432_Init
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_RW_Reg
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitAck
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Stop
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Start
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SendB_Ack
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RecvB_Ack
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ACK
</UL>

<P><STRONG><a name="[9d]"></a>GPIO_SetBits</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gpio.o(i.GPIO_SetBits))
<BR><BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Si4432_Init
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Si4432_PortInit
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_RW_Reg
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Init
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitAck
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Stop
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Start
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SendB_Ack
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RecvB_Ack
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ACK
</UL>

<P><STRONG><a name="[b1]"></a>GetCurrentSrcFifoPtr</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, phymsgproc.o(i.GetCurrentSrcFifoPtr))
<BR><BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg_Feedback
</UL>

<P><STRONG><a name="[75]"></a>GetDevPivotalSet</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, devparttab.o(i.GetDevPivotalSet))
<BR><BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppJump_Init
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Version_Attr
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_DeviceType_Attr
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Updata_Flag
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Updata_Channel
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Channel_Get
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_DevUpgradeReady_Attr
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardID_Check
</UL>

<P><STRONG><a name="[51]"></a>Get_433Channel_Attr</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, deviceupgradeattr.o(i.Get_433Channel_Attr))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Get_433Channel_Attr &rArr; Channel_Get
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Channel_Get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sysexeattr.o(.constdata)
</UL>
<P><STRONG><a name="[4a]"></a>Get_DeviceType_Attr</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, sysexeattr.o(i.Get_DeviceType_Attr))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Get_DeviceType_Attr
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDevPivotalSet
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sysexeattr.o(.constdata)
</UL>
<P><STRONG><a name="[4e]"></a>Get_IAPReady_Attr</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, deviceupgradeattr.o(i.Get_IAPReady_Attr))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = Get_IAPReady_Attr &rArr; Get_IAPPackCheck_Attr &rArr; Updata_PackCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Feed
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_IAPPackCheck_Attr
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_DevUpgradeReady_Attr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sysexeattr.o(.constdata)
</UL>
<P><STRONG><a name="[4b]"></a>Get_Version_Attr</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, sysexeattr.o(i.Get_Version_Attr))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Get_Version_Attr
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDevPivotalSet
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sysexeattr.o(.constdata)
</UL>
<P><STRONG><a name="[99]"></a>HardID_Check</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, syshard.o(i.HardID_Check))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HardID_Check
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDevPivotalSet
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserData_Init
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysEEPROMData_Init
</UL>

<P><STRONG><a name="[9e]"></a>I2C_Init</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, i2c.o(i.I2C_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = I2C_Init &rArr; GPIO_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysHard_Init
</UL>

<P><STRONG><a name="[a5]"></a>IIC_GetState</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, i2c.o(i.IIC_GetState))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = IIC_GetState &rArr; I2C_SendB_Ack &rArr; I2C_WaitAck &rArr; GPIO_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Stop
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Start
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SendB_Ack
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteDataToEEPROMEx
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteDataToEEPROM
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDataFromEEPROM
</UL>

<P><STRONG><a name="[a6]"></a>IIC_Read</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, i2c.o(i.IIC_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = IIC_Read &rArr; I2C_SendB_Ack &rArr; I2C_WaitAck &rArr; GPIO_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Stop
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Start
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SendB_Ack
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RecvB_Ack
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDataFromEEPROM
</UL>

<P><STRONG><a name="[a7]"></a>IIC_Write</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, i2c.o(i.IIC_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = IIC_Write &rArr; I2C_SendB_Ack &rArr; I2C_WaitAck &rArr; GPIO_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Stop
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Start
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SendB_Ack
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteDataToEEPROM
</UL>

<P><STRONG><a name="[a8]"></a>IIC_WriteSame</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, i2c.o(i.IIC_WriteSame))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = IIC_WriteSame &rArr; I2C_SendB_Ack &rArr; I2C_WaitAck &rArr; GPIO_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Stop
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Start
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SendB_Ack
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteDataToEEPROMEx
</UL>

<P><STRONG><a name="[a9]"></a>IWDG_Config</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, iwdg.o(i.IWDG_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = IWDG_Config &rArr; Thread_Login &rArr; Thread_Wake &rArr; Thread_Check
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Thread_Login
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysHard_Init
</UL>

<P><STRONG><a name="[44]"></a>IWDG_Feed</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, iwdg.o(i.IWDG_Feed))
<BR><BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_IAPReady_Attr
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_IAPPackSave_Attr
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_IAPReady_Attr
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>
<BR>[Address Reference Count : 2]<UL><LI> iwdg.o(i.IWDG_Config)
<LI> iwdg.o(i.IWDG_FeedOFF)
</UL>
<P><STRONG><a name="[94]"></a>IWDG_FeedOFF</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, iwdg.o(i.IWDG_FeedOFF))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = IWDG_FeedOFF &rArr; Thread_Logout &rArr; Thread_Check
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Thread_Logout
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_IAPDataCRC_Attr
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fault_Upload
</UL>

<P><STRONG><a name="[43]"></a>Instruct_Run</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, instruct.o(i.Instruct_Run))
<BR>[Address Reference Count : 1]<UL><LI> faultmanage.o(i.Fault_Upload)
</UL>
<P><STRONG><a name="[76]"></a>JumpToCode</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, sys.o(i.JumpToCode))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = JumpToCode
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_MSP
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppJump_Init
</UL>

<P><STRONG><a name="[ab]"></a>MY_NVIC_Init</STRONG> (Thumb, 62 bytes, Stack size 20 bytes, sys.o(i.MY_NVIC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = MY_NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MY_NVIC_PriorityGroupConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Si4432_Init
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
</UL>

<P><STRONG><a name="[ac]"></a>MY_NVIC_PriorityGroupConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, sys.o(i.MY_NVIC_PriorityGroupConfig))
<BR><BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MY_NVIC_Init
</UL>

<P><STRONG><a name="[ad]"></a>MsgReviceProc</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, cmdprocess.o(i.MsgReviceProc))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MsgReviceProc &rArr; Process_FIFOData
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_FIFOData
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ae]"></a>Msg_Execute</STRONG> (Thumb, 256 bytes, Stack size 32 bytes, cmdprocess.o(i.Msg_Execute))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Msg_Execute
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnitCnt_Get
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg_Process
</UL>

<P><STRONG><a name="[b0]"></a>Msg_Feedback</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, cmdprocess.o(i.Msg_Feedback))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = Msg_Feedback &rArr; EncryptCmd_put &rArr; EncryptData &rArr; ChkCrcValue
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurrentSrcFifoPtr
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fault_Upload
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EncryptCmd_put
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg_Process
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg_Package
</UL>

<P><STRONG><a name="[90]"></a>Msg_Upload</STRONG> (Thumb, 52 bytes, Stack size 72 bytes, msgpackage.o(i.Msg_Upload))
<BR><BR>[Stack]<UL><LI>Max Depth = 704 + Unknown Stack Size
<LI>Call Chain = Msg_Upload &rArr; Msg_UploadUnit &rArr; Msg_Package &rArr; Msg_Feedback &rArr; EncryptCmd_put &rArr; EncryptData &rArr; ChkCrcValue
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg_UploadUnit
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FaultMsg
</UL>

<P><STRONG><a name="[b5]"></a>Msg_UploadUnit</STRONG> (Thumb, 54 bytes, Stack size 32 bytes, msgpackage.o(i.Msg_UploadUnit))
<BR><BR>[Stack]<UL><LI>Max Depth = 632 + Unknown Stack Size
<LI>Call Chain = Msg_UploadUnit &rArr; Msg_Package &rArr; Msg_Feedback &rArr; EncryptCmd_put &rArr; EncryptData &rArr; ChkCrcValue
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg_Package
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg_Upload
</UL>

<P><STRONG><a name="[b3]"></a>Object_Check</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, object.o(i.Object_Check))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Object_Check &rArr; Check_Repeat
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Repeat
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg_Process
</UL>

<P><STRONG><a name="[40]"></a>PHY_433Send</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, phymsgproc.o(i.PHY_433Send))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = PHY_433Send &rArr; Si4432_Send &rArr; SI4432_Send_All_Data &rArr; Si4432_Fault &rArr; Fault_Upload &rArr; FaultData_Save &rArr; WriteDataToEEPROM &rArr;  Fault_Upload (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Si4432_Send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmdprocess.o(i.FIFOInit)
</UL>
<P><STRONG><a name="[87]"></a>PHY_RcvFIFO_Init</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, phymsgproc.o(i.PHY_RcvFIFO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PHY_RcvFIFO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIFOInit
</UL>

<P><STRONG><a name="[41]"></a>PHY_USARTSend</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, phymsgproc.o(i.PHY_USARTSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = PHY_USARTSend &rArr; USART_Send &rArr; USART_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmdprocess.o(i.FIFOInit)
</UL>
<P><STRONG><a name="[7e]"></a>Process_FIFOData</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, cmdprocess.o(i.Process_FIFOData))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Process_FIFOData
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsgReviceProc
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataSend_Thread
</UL>

<P><STRONG><a name="[ba]"></a>Program_Erase</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, program.o(i.Program_Erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Program_Erase &rArr; FLASH_ErasePage
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_lock
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Unlock
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ErasePage
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpgradeReady
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Updata_Flag
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Updata_Channel
</UL>

<P><STRONG><a name="[79]"></a>Program_Read</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, program.o(i.Program_Read))
<BR><BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Updata_Channel
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Channel_Get
</UL>

<P><STRONG><a name="[bd]"></a>Program_Write</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, program.o(i.Program_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Program_Write &rArr; Flash_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_lock
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Write
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Unlock
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Updata_PackProcess
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Updata_Flag
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Updata_Channel
</UL>

<P><STRONG><a name="[de]"></a>RCC_GetClocksFreq</STRONG> (Thumb, 158 bytes, Stack size 12 bytes, system_stm32l1xx.o(i.RCC_GetClocksFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Init
</UL>

<P><STRONG><a name="[8e]"></a>ReadDataFromEEPROM</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, eeprom.o(i.ReadDataFromEEPROM))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + In Cycle
<LI>Call Chain = ReadDataFromEEPROM &rArr;  Fault_Upload (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fault_Upload
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Read
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_GetState
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserData_Init
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FaultData_Save
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnitPublicEEPROMData_Get
</UL>

<P><STRONG><a name="[c8]"></a>SPI2_Init</STRONG> (Thumb, 184 bytes, Stack size 0 bytes, spi.o(i.SPI2_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI2_Init &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_ReadWriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Si4432_PortInit
</UL>

<P><STRONG><a name="[c9]"></a>SPI2_ReadWriteByte</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, spi.o(i.SPI2_ReadWriteByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI2_ReadWriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_RW_Reg
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_Init
</UL>

<P><STRONG><a name="[d6]"></a>SPI2_SetSpeed</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, spi.o(i.SPI2_SetSpeed))
<BR><BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Si4432_PortInit
</UL>

<P><STRONG><a name="[50]"></a>Set_433Channel_Attr</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, deviceupgradeattr.o(i.Set_433Channel_Attr))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Set_433Channel_Attr &rArr; Thread_Login &rArr; Thread_Wake &rArr; Thread_Check
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Updata_Channel
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Channel_Get
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Thread_Login
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserEEPROMData_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sysexeattr.o(.constdata)
</UL>
<P><STRONG><a name="[4f]"></a>Set_IAPPackSave_Attr</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, deviceupgradeattr.o(i.Set_IAPPackSave_Attr))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Set_IAPPackSave_Attr &rArr; Updata_PackProcess &rArr; Program_Write &rArr; Flash_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Updata_PackProcess
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Feed
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sysexeattr.o(.constdata)
</UL>
<P><STRONG><a name="[4d]"></a>Set_IAPReady_Attr</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, deviceupgradeattr.o(i.Set_IAPReady_Attr))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = Set_IAPReady_Attr &rArr; Set_IAPDataCRC_Attr &rArr; Updata_Flag &rArr; Updata_Channel &rArr; Program_Write &rArr; Flash_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpgradePreStage
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Feed
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_IAPDataCRC_Attr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sysexeattr.o(.constdata)
</UL>
<P><STRONG><a name="[4c]"></a>Set_UserDataFormat_Attr</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, sysexeattr.o(i.Set_UserDataFormat_Attr))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = Set_UserDataFormat_Attr &rArr; UserEEPROMData_Init &rArr; SysEEPROMData_Init &rArr; WriteDataToEEPROM &rArr;  Fault_Upload (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserEEPROMData_Init
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnitPublicEEPROMUnitData_Init
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnitPrivateEEPROMUnitData_Init
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnitCnt_Get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sysexeattr.o(.constdata)
</UL>
<P><STRONG><a name="[c5]"></a>Si4432_Idle</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, si4432.o(i.Si4432_Idle))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Si4432_Idle &rArr; SPI_RW_Reg &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_RW_Reg
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Si4432_Init
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI4432_Send_All_Data
</UL>

<P><STRONG><a name="[45]"></a>Si4432_Init</STRONG> (Thumb, 646 bytes, Stack size 8 bytes, si4432.o(i.Si4432_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Si4432_Init &rArr; Thread_Login &rArr; Thread_Wake &rArr; Thread_Check
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Channel_Get
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Thread_Login
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Si4432_Idle
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Si4432_PortInit
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMode_RX
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_RW_Reg
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI4432_SendEn
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MY_NVIC_Init
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_NVIC_Config
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysHard_Init
</UL>
<BR>[Address Reference Count : 2]<UL><LI> deviceupgradeattr.o(i.Set_433Channel_Attr)
<LI> si4432.o(i.Si4432_Fault)
</UL>
<P><STRONG><a name="[b7]"></a>Si4432_Send</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, si4432.o(i.Si4432_Send))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = Si4432_Send &rArr; SI4432_Send_All_Data &rArr; Si4432_Fault &rArr; Fault_Upload &rArr; FaultData_Save &rArr; WriteDataToEEPROM &rArr;  Fault_Upload (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Thread_Login
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI4432_Send_All_Data
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_433M_Busy
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PHY_433Send
</UL>

<P><STRONG><a name="[52]"></a>SysAttr_Init</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, sysexeattr.o(i.SysAttr_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = SysAttr_Init &rArr; UserData_Init &rArr; FaultData_Init &rArr; WriteDataToEEPROMEx &rArr; Fault_Upload &rArr; FaultData_Save &rArr; WriteDataToEEPROM &rArr;  Fault_Upload (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserData_Init
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EncryptInit
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Thread_Login
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fault_Upload
</UL>
<BR>[Address Reference Count : 1]<UL><LI> unitcfg.o(.constdata)
</UL>
<P><STRONG><a name="[d8]"></a>SysEEPROMData_Init</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, userdata.o(i.SysEEPROMData_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = SysEEPROMData_Init &rArr; WriteDataToEEPROM &rArr;  Fault_Upload (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteDataToEEPROM
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardID_Check
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserEEPROMData_Init
</UL>

<P><STRONG><a name="[da]"></a>SysHard_Init</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, syshard.o(i.SysHard_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = SysHard_Init &rArr; Si4432_Init &rArr; Thread_Login &rArr; Thread_Wake &rArr; Thread_Check
</UL>
<BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Si4432_Init
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Init
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Config
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c]"></a>SysTick_Handler</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, systick.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = SysTick_Handler &rArr; Thread_RunCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Thread_RunCheck
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(RESET)
</UL>
<P><STRONG><a name="[db]"></a>SysTick_Init</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, systick.o(i.SysTick_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = SysTick_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysHard_Init
</UL>

<P><STRONG><a name="[53]"></a>Sys_UnitAttrNum</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, sysexeattr.o(i.Sys_UnitAttrNum))
<BR>[Address Reference Count : 1]<UL><LI> unitcfg.o(.constdata)
</UL>
<P><STRONG><a name="[3a]"></a>SystemInit</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, system_stm32l1xx.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SystemInit &rArr; SetSysClock
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(.text)
</UL>
<P><STRONG><a name="[f0]"></a>Thread_Init</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, thread.o(i.Thread_Init))
<BR><BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7d]"></a>Thread_Login</STRONG> (Thumb, 136 bytes, Stack size 32 bytes, thread.o(i.Thread_Login))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Thread_Login &rArr; Thread_Wake &rArr; Thread_Check
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Thread_Wake
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Thread_Check
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserData_Init
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Upload_Fault
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysAttr_Init
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Si4432_Send
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Si4432_Init
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_433Channel_Attr
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_IAPDataCRC_Attr
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fault_Upload
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIFOInit
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_433M_Busy
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Config
</UL>

<P><STRONG><a name="[93]"></a>Thread_Logout</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, thread.o(i.Thread_Logout))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Thread_Logout &rArr; Thread_Check
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Thread_Check
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Thread_Process
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserData_Init
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_FeedOFF
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fault_Upload
</UL>

<P><STRONG><a name="[e2]"></a>Thread_Process</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, thread.o(i.Thread_Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = Thread_Process &rArr; Thread_Logout &rArr; Thread_Check
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Thread_Logout
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[dd]"></a>Thread_RunCheck</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, thread.o(i.Thread_RunCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = Thread_RunCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[e1]"></a>Thread_Wake</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, thread.o(i.Thread_Wake))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Thread_Wake &rArr; Thread_Check
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Thread_Check
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memmove
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Thread_Login
</UL>

<P><STRONG><a name="[7b]"></a>Time_Get</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, systick.o(i.Time_Get))
<BR><BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Si4432_Threshold
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_433M_Busy
</UL>

<P><STRONG><a name="[32]"></a>USART1_IRQHandler</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, usart.o(i.USART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = USART1_IRQHandler &rArr; fifo_putc
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_putc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(RESET)
</UL>
<P><STRONG><a name="[dc]"></a>USART_Init</STRONG> (Thumb, 168 bytes, Stack size 32 bytes, usart.o(i.USART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = USART_Init &rArr; MY_NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MY_NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysHard_Init
</UL>

<P><STRONG><a name="[b9]"></a>USART_Send</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, usart.o(i.USART_Send))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USART_Send &rArr; USART_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PHY_USARTSend
</UL>

<P><STRONG><a name="[af]"></a>UnitCnt_Get</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, unitcfg.o(i.UnitCnt_Get))
<BR><BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_UserDataFormat_Attr
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg_Execute
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnitPublicEEPROMData_Init
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnitPrivateEEPROMData_Init
</UL>

<P><STRONG><a name="[e4]"></a>UnitPrivateEEPROMData_Init</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, userdata.o(i.UnitPrivateEEPROMData_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UnitPrivateEEPROMData_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnitPrivateEEPROMUnitData_Init
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnitCnt_Get
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserEEPROMData_Init
</UL>

<P><STRONG><a name="[d1]"></a>UnitPrivateEEPROMUnitData_Init</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, userdata.o(i.UnitPrivateEEPROMUnitData_Init))
<BR><BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_UserDataFormat_Attr
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnitPrivateEEPROMData_Init
</UL>

<P><STRONG><a name="[e5]"></a>UnitPublicEEPROMData_Get</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, userdata.o(i.UnitPublicEEPROMData_Get))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = UnitPublicEEPROMData_Get &rArr; ReadDataFromEEPROM &rArr;  Fault_Upload (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDataFromEEPROM
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Unit_Init
</UL>

<P><STRONG><a name="[e6]"></a>UnitPublicEEPROMData_Init</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, userdata.o(i.UnitPublicEEPROMData_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = UnitPublicEEPROMData_Init &rArr; UnitPublicEEPROMUnitData_Init &rArr; WriteDataToEEPROM &rArr;  Fault_Upload (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnitPublicEEPROMUnitData_Init
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnitCnt_Get
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserEEPROMData_Init
</UL>

<P><STRONG><a name="[d0]"></a>UnitPublicEEPROMUnitData_Init</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, userdata.o(i.UnitPublicEEPROMUnitData_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = UnitPublicEEPROMUnitData_Init &rArr; WriteDataToEEPROM &rArr;  Fault_Upload (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteDataToEEPROM
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_UserDataFormat_Attr
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnitPublicEEPROMData_Init
</UL>

<P><STRONG><a name="[e7]"></a>Unit_Init</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, unitcfg.o(i.Unit_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = Unit_Init &rArr; UnitPublicEEPROMData_Get &rArr; ReadDataFromEEPROM &rArr;  Fault_Upload (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnitPublicEEPROMData_Get
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserData_Init
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[cc]"></a>Updata_Calibrate</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, updata.o(i.Updata_Calibrate))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Updata_Calibrate &rArr; ChkCrcValue
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChkCrcValue
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_IAPDataCRC_Attr
</UL>

<P><STRONG><a name="[ca]"></a>Updata_Channel</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, updata.o(i.Updata_Channel))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Updata_Channel &rArr; Program_Write &rArr; Flash_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Program_Write
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Program_Read
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Program_Erase
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_DefaultValue
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDevPivotalSet
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Updata_Flag
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_433Channel_Attr
</UL>

<P><STRONG><a name="[cd]"></a>Updata_Flag</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, updata.o(i.Updata_Flag))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Updata_Flag &rArr; Updata_Channel &rArr; Program_Write &rArr; Flash_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Program_Write
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Program_Erase
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_DefaultValue
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Updata_Channel
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDevPivotalSet
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Channel_Get
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_IAPDataCRC_Attr
</UL>

<P><STRONG><a name="[98]"></a>Updata_PackCheck</STRONG> (Thumb, 72 bytes, Stack size 20 bytes, updata.o(i.Updata_PackCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Updata_PackCheck
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_IAPPackCheck_Attr
</UL>

<P><STRONG><a name="[ce]"></a>Updata_PackProcess</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, updata.o(i.Updata_PackProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Updata_PackProcess &rArr; Program_Write &rArr; Flash_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Program_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_IAPPackSave_Attr
</UL>

<P><STRONG><a name="[cf]"></a>UpgradePreStage</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, updata.o(i.UpgradePreStage))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = UpgradePreStage &rArr; UpgradeReady &rArr; Program_Erase &rArr; FLASH_ErasePage
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpgradeReady
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_IAPReady_Attr
</UL>

<P><STRONG><a name="[92]"></a>Upload_Fault</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, upload.o(i.Upload_Fault))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Upload_Fault &rArr; Thread_Login &rArr; Thread_Wake &rArr; Thread_Check
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Thread_Login
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserEEPROMData_Init
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Upload_RESTART
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fault_Upload
</UL>

<P><STRONG><a name="[d7]"></a>UserData_Init</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, userdata.o(i.UserData_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = UserData_Init &rArr; FaultData_Init &rArr; WriteDataToEEPROMEx &rArr; Fault_Upload &rArr; FaultData_Save &rArr; WriteDataToEEPROM &rArr;  Fault_Upload (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Thread_Logout
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserEEPROMData_Init
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Thread_Login
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Unit_Init
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDataFromEEPROM
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardID_Check
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FaultData_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysAttr_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> userdata.o(i.UserData_Init)
</UL>
<P><STRONG><a name="[d2]"></a>UserEEPROMData_Init</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, userdata.o(i.UserEEPROMData_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = UserEEPROMData_Init &rArr; SysEEPROMData_Init &rArr; WriteDataToEEPROM &rArr;  Fault_Upload (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Upload_Fault
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_433Channel_Attr
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnitPublicEEPROMData_Init
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnitPrivateEEPROMData_Init
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysEEPROMData_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserData_Init
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_UserDataFormat_Attr
</UL>

<P><STRONG><a name="[8f]"></a>WriteDataToEEPROM</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, eeprom.o(i.WriteDataToEEPROM))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + In Cycle
<LI>Call Chain = WriteDataToEEPROM &rArr;  Fault_Upload (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fault_Upload
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Write
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_GetState
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnitPublicEEPROMUnitData_Init
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FaultData_Save
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysEEPROMData_Init
</UL>

<P><STRONG><a name="[8c]"></a>WriteDataToEEPROMEx</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, eeprom.o(i.WriteDataToEEPROMEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = WriteDataToEEPROMEx &rArr; Fault_Upload &rArr; FaultData_Save &rArr; WriteDataToEEPROM &rArr;  Fault_Upload (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fault_Upload
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_WriteSame
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_GetState
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FaultData_Init
</UL>

<P><STRONG><a name="[3f]"></a>decryptfifo_get</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, fifodataproc.o(i.decryptfifo_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = decryptfifo_get &rArr; fifo_gets
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_validSize
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_gets
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_find
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_empty
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_cmp
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decryptfifo_getEx
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmdprocess.o(i.FIFOInit)
</UL>
<P><STRONG><a name="[3d]"></a>decryptfifo_getEx</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, fifodataproc.o(i.decryptfifo_getEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = decryptfifo_getEx &rArr; DecryptData &rArr; GetEncodeFromKey &rArr; KeyEncode &rArr; KeyEncodeShift
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecryptData
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decryptfifo_get
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmdprocess.o(i.FIFOInit)
</UL>
<P><STRONG><a name="[d3]"></a>delay_ms</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, delay.o(i.delay_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = delay_ms
</UL>
<BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Feed
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Si4432_Init
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Si4432_Idle
</UL>

<P><STRONG><a name="[c7]"></a>delay_us</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, delay.o(i.delay_us))
<BR><BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI4432_Send_All_Data
</UL>

<P><STRONG><a name="[b8]"></a>fifo_Init</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, fifo.o(i.fifo_Init))
<BR><BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PHY_RcvFIFO_Init
</UL>

<P><STRONG><a name="[ec]"></a>fifo_cmp</STRONG> (Thumb, 54 bytes, Stack size 20 bytes, fifo.o(i.fifo_cmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = fifo_cmp
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decryptfifo_get
</UL>

<P><STRONG><a name="[eb]"></a>fifo_empty</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, fifo.o(i.fifo_empty))
<BR><BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_gets
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decryptfifo_get
</UL>

<P><STRONG><a name="[ea]"></a>fifo_find</STRONG> (Thumb, 76 bytes, Stack size 20 bytes, fifo.o(i.fifo_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = fifo_find
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decryptfifo_get
</UL>

<P><STRONG><a name="[ed]"></a>fifo_gets</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, fifo.o(i.fifo_gets))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = fifo_gets
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_validSize
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_empty
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decryptfifo_get
</UL>

<P><STRONG><a name="[c1]"></a>fifo_putc</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, fifo.o(i.fifo_putc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = fifo_putc
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_full
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecDataToFifo
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[84]"></a>fifo_puts</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, fifo.o(i.fifo_puts))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = fifo_puts
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_surplusSize
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tail_put
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;head_put
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EncryptCmd_put
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecDataToFifo
</UL>

<P><STRONG><a name="[e9]"></a>fifo_validSize</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, fifo.o(i.fifo_validSize))
<BR><BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_gets
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decryptfifo_get
</UL>

<P><STRONG><a name="[c0]"></a>head_put</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fifodataproc.o(i.head_put))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = head_put &rArr; fifo_puts
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_puts
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecDataToFifo
</UL>

<P><STRONG><a name="[5d]"></a>main</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = main &rArr; Unit_Init &rArr; UnitPublicEEPROMData_Get &rArr; ReadDataFromEEPROM &rArr;  Fault_Upload (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppJump_Init
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Thread_Process
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Thread_Init
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsgReviceProc
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIFOInit
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysHard_Init
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevPivotalSetInit
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Unit_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[6a]"></a>memcmp</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, bestfulib.o(i.memcmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetEncodeFromKey
</UL>

<P><STRONG><a name="[6b]"></a>memcpy</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, bestfulib.o(i.memcpy))
<BR><BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Thread_Wake
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EncryptInit
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_puts
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_gets
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decryptfifo_getEx
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EncryptCmd_put
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetEncodeFromKey
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg_Upload
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg_Package
</UL>

<P><STRONG><a name="[6d]"></a>memmove</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, bestfulib.o(i.memmove))
<BR><BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Thread_Wake
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Thread_Logout
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EncryptData
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecryptData
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Thread_Login
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg_Execute
</UL>

<P><STRONG><a name="[d9]"></a>memset</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, bestfulib.o(i.memset))
<BR><BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpgradeReady
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysEEPROMData_Init
</UL>

<P><STRONG><a name="[c2]"></a>tail_put</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fifodataproc.o(i.tail_put))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = tail_put &rArr; fifo_puts
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_puts
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecDataToFifo
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[df]"></a>SetSysClock</STRONG> (Thumb, 190 bytes, Stack size 12 bytes, system_stm32l1xx.o(i.SetSysClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SetSysClock
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[42]"></a>DataSend_Thread</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, cmdprocess.o(i.DataSend_Thread))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DataSend_Thread &rArr; Process_FIFOData
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_FIFOData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmdprocess.o(i.FIFOInit)
</UL>
<P><STRONG><a name="[3e]"></a>Msg_Process</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, cmdprocess.o(i.Msg_Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = Msg_Process &rArr; Msg_Feedback &rArr; EncryptCmd_put &rArr; EncryptData &rArr; ChkCrcValue
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Object_Check
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg_Feedback
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg_Execute
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg_ReturnType
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmdprocess.o(i.FIFOInit)
</UL>
<P><STRONG><a name="[b4]"></a>Msg_ReturnType</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, cmdprocess.o(i.Msg_ReturnType))
<BR><BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg_Process
</UL>

<P><STRONG><a name="[96]"></a>Get_DevUpgradeReady_Attr</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, deviceupgradeattr.o(i.Get_DevUpgradeReady_Attr))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Get_DevUpgradeReady_Attr
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDevPivotalSet
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_IAPReady_Attr
</UL>

<P><STRONG><a name="[97]"></a>Get_IAPPackCheck_Attr</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, deviceupgradeattr.o(i.Get_IAPPackCheck_Attr))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Get_IAPPackCheck_Attr &rArr; Updata_PackCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Updata_PackCheck
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_IAPReady_Attr
</UL>

<P><STRONG><a name="[cb]"></a>Set_IAPDataCRC_Attr</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, deviceupgradeattr.o(i.Set_IAPDataCRC_Attr))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = Set_IAPDataCRC_Attr &rArr; Updata_Flag &rArr; Updata_Channel &rArr; Program_Write &rArr; Flash_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Updata_Flag
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Updata_Calibrate
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_FeedOFF
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Thread_Login
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_IAPReady_Attr
</UL>

<P><STRONG><a name="[ee]"></a>fifo_full</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, fifo.o(i.fifo_full))
<BR><BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_putc
</UL>

<P><STRONG><a name="[ef]"></a>fifo_surplusSize</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, fifo.o(i.fifo_surplusSize))
<BR><BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_puts
</UL>

<P><STRONG><a name="[b6]"></a>Check_Repeat</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, object.o(i.Check_Repeat))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Check_Repeat
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Object_Check
</UL>

<P><STRONG><a name="[48]"></a>Upload_RESTART</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sysexeattr.o(i.Upload_RESTART))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Upload_RESTART &rArr; Upload_Fault &rArr; Thread_Login &rArr; Thread_Wake &rArr; Thread_Check
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Upload_Fault
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sysexeattr.o(i.SysAttr_Init)
</UL>
<P><STRONG><a name="[e0]"></a>Thread_Check</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, thread.o(i.Thread_Check))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Thread_Check
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Thread_Wake
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Thread_Logout
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Thread_Login
</UL>

<P><STRONG><a name="[e8]"></a>UpgradeReady</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, updata.o(i.UpgradeReady))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = UpgradeReady &rArr; Program_Erase &rArr; FLASH_ErasePage
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Program_Erase
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpgradePreStage
</UL>

<P><STRONG><a name="[b2]"></a>Msg_Package</STRONG> (Thumb, 68 bytes, Stack size 272 bytes, msgpackage.o(i.Msg_Package))
<BR><BR>[Stack]<UL><LI>Max Depth = 600 + Unknown Stack Size
<LI>Call Chain = Msg_Package &rArr; Msg_Feedback &rArr; EncryptCmd_put &rArr; EncryptData &rArr; ChkCrcValue
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg_Feedback
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg_UploadUnit
</UL>

<P><STRONG><a name="[49]"></a>FaultMsg</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, upload.o(i.FaultMsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 704 + Unknown Stack Size
<LI>Call Chain = FaultMsg &rArr; Msg_Upload &rArr; Msg_UploadUnit &rArr; Msg_Package &rArr; Msg_Feedback &rArr; EncryptCmd_put &rArr; EncryptData &rArr; ChkCrcValue
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg_Upload
</UL>
<BR>[Address Reference Count : 1]<UL><LI> upload.o(i.Upload_Fault)
</UL>
<P><STRONG><a name="[8a]"></a>Flash_EOP</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, flash.o(i.Flash_EOP))
<BR><BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ErasePage
</UL>

<P><STRONG><a name="[89]"></a>Flash_Status</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, flash.o(i.Flash_Status))
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Write
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ErasePage
</UL>

<P><STRONG><a name="[9c]"></a>Delay_nNOP</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, i2c.o(i.Delay_nNOP))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitAck
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Stop
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Start
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SendB_Ack
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RecvB_Ack
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ACK
</UL>

<P><STRONG><a name="[9a]"></a>I2C_ACK</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, i2c.o(i.I2C_ACK))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = I2C_ACK
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_nNOP
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RecvB_Ack
</UL>

<P><STRONG><a name="[a0]"></a>I2C_RecvB_Ack</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, i2c.o(i.I2C_RecvB_Ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = I2C_RecvB_Ack &rArr; GPIO_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ACK
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_nNOP
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Read
</UL>

<P><STRONG><a name="[a1]"></a>I2C_SendB_Ack</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, i2c.o(i.I2C_SendB_Ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = I2C_SendB_Ack &rArr; I2C_WaitAck &rArr; GPIO_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitAck
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_nNOP
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_WriteSame
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Write
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Read
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_GetState
</UL>

<P><STRONG><a name="[a3]"></a>I2C_Start</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, i2c.o(i.I2C_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = I2C_Start
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_nNOP
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_WriteSame
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Write
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Read
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_GetState
</UL>

<P><STRONG><a name="[a4]"></a>I2C_Stop</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, i2c.o(i.I2C_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = I2C_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_nNOP
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_WriteSame
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Write
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Read
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_GetState
</UL>

<P><STRONG><a name="[a2]"></a>I2C_WaitAck</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, i2c.o(i.I2C_WaitAck))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = I2C_WaitAck &rArr; GPIO_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_nNOP
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SendB_Ack
</UL>

<P><STRONG><a name="[e3]"></a>USART_Write</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, usart.o(i.USART_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Send
</UL>

<P><STRONG><a name="[7a]"></a>Check_433M_Busy</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, si4432.o(i.Check_433M_Busy))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = Check_433M_Busy &rArr; Thread_Login &rArr; Thread_Wake &rArr; Thread_Check
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Thread_Login
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time_Get
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Si4432_Send
</UL>

<P><STRONG><a name="[81]"></a>RecDataToFifo</STRONG> (Thumb, 278 bytes, Stack size 104 bytes, si4432.o(i.RecDataToFifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = RecDataToFifo &rArr; Fault_Upload &rArr; FaultData_Save &rArr; WriteDataToEEPROM &rArr;  Fault_Upload (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tail_put
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;head_put
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_puts
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_putc
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fault_Upload
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Si4432_Fault
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMode_RX
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_RW_Reg
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI15_10_IRQHandler
</UL>

<P><STRONG><a name="[47]"></a>SI4432_SendEn</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, si4432.o(i.SI4432_SendEn))
<BR><BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Si4432_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> si4432.o(i.Si4432_Send)
</UL>
<P><STRONG><a name="[c4]"></a>SI4432_Send_All_Data</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, si4432.o(i.SI4432_Send_All_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = SI4432_Send_All_Data &rArr; Si4432_Fault &rArr; Fault_Upload &rArr; FaultData_Save &rArr; WriteDataToEEPROM &rArr;  Fault_Upload (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Si4432_Idle
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Si4432_Fault
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMode_TX
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMode_RX
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_RW_Reg
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Si4432_Send
</UL>

<P><STRONG><a name="[bf]"></a>SPI_RW_Reg</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, si4432.o(i.SPI_RW_Reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SPI_RW_Reg &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_ReadWriteByte
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Si4432_Init
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Si4432_Idle
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Si4432_Threshold
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMode_TX
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMode_RX
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI4432_Send_All_Data
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecDataToFifo
</UL>

<P><STRONG><a name="[c3]"></a>SetMode_RX</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, si4432.o(i.SetMode_RX))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SetMode_RX &rArr; SPI_RW_Reg &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_RW_Reg
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Si4432_Init
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI4432_Send_All_Data
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecDataToFifo
</UL>

<P><STRONG><a name="[c6]"></a>SetMode_TX</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, si4432.o(i.SetMode_TX))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SetMode_TX &rArr; SPI_RW_Reg &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_RW_Reg
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI4432_Send_All_Data
</UL>

<P><STRONG><a name="[be]"></a>Si4432_Fault</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, si4432.o(i.Si4432_Fault))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = Si4432_Fault &rArr; Fault_Upload &rArr; FaultData_Save &rArr; WriteDataToEEPROM &rArr;  Fault_Upload (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fault_Upload
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Si4432_Threshold
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI4432_Send_All_Data
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecDataToFifo
</UL>

<P><STRONG><a name="[d4]"></a>Si4432_PortInit</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, si4432.o(i.Si4432_PortInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Si4432_PortInit &rArr; GPIO_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_SetSpeed
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_Init
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Si4432_Init
</UL>

<P><STRONG><a name="[3c]"></a>Si4432_Threshold</STRONG> (Thumb, 212 bytes, Stack size 16 bytes, si4432.o(i.Si4432_Threshold))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = Si4432_Threshold &rArr; Si4432_Fault &rArr; Fault_Upload &rArr; FaultData_Save &rArr; WriteDataToEEPROM &rArr;  Fault_Upload (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Si4432_Fault
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_RW_Reg
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time_Get
</UL>
<BR>[Address Reference Count : 2]<UL><LI> si4432.o(i.Si4432_Init)
<LI> si4432.o(i.Check_433M_Busy)
</UL>
<P><STRONG><a name="[64]"></a>KeyEncodeSwapBits</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, dataencrypt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = KeyEncodeSwapBits
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyEncode
</UL>

<P><STRONG><a name="[66]"></a>KeyEncodeXor</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, dataencrypt.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyEncode
</UL>

<P><STRONG><a name="[65]"></a>KeyEncodeShift</STRONG> (Thumb, 402 bytes, Stack size 24 bytes, dataencrypt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = KeyEncodeShift
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyEncode
</UL>

<P><STRONG><a name="[63]"></a>KeyEncode</STRONG> (Thumb, 142 bytes, Stack size 8 bytes, dataencrypt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = KeyEncode &rArr; KeyEncodeShift
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyEncodeShift
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyEncodeXor
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyEncodeSwapBits
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EncryptInit
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetEncodeFromKey
</UL>

<P><STRONG><a name="[6e]"></a>DataFieldEncodeOrDecode</STRONG> (Thumb, 32 bytes, Stack size 12 bytes, dataencrypt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = DataFieldEncodeOrDecode
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EncryptData
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecryptData
</UL>

<P><STRONG><a name="[67]"></a>CheckDataFieldCRC</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, dataencrypt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = CheckDataFieldCRC &rArr; ChkCrcValue
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChkCrcValue
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecryptData
</UL>

<P><STRONG><a name="[69]"></a>GetEncodeFromKey</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, dataencrypt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = GetEncodeFromKey &rArr; KeyEncode &rArr; KeyEncodeShift
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyEncode
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecryptData
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
